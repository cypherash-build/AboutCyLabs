"use client";
import React, { useRef, useEffect } from "react";
import { gsap } from "gsap";
import { cn } from "@/lib/utils";

interface TextPressureProps {
  text: string;
  className?: string;
  pressure?: number;
  maxFontSizeMultiplier?: number;
  baseFontSize?: number;
}

const TextPressure: React.FC<TextPressureProps> = ({
  text,
  className,
  pressure = 0.5,
  maxFontSizeMultiplier = 1.5,
  baseFontSize = 60, // A sensible default for large headlines
}) => {
  const h1Ref = useRef<HTMLHeadingElement>(null);
  let charsRef = useRef<HTMLSpanElement[]>([]);

  useEffect(() => {
    const h1 = h1Ref.current;
    if (!h1 || typeof window === 'undefined') return;

    // Split text into characters
    const currentChars = text.split("").map(char => {
      const span = document.createElement("span");
      span.textContent = char === " " ? "\u00A0" : char; // Use non-breaking space
      span.style.display = "inline-block";
      span.style.position = "relative"; // Needed for GSAP transforms
      return span;
    });

    h1.innerHTML = "";
    currentChars.forEach(char => h1.appendChild(char));
    charsRef.current = currentChars;

    const onMouseMove = (e: MouseEvent) => {
      const { clientX, clientY } = e;
      const { left, top, width, height } = h1.getBoundingClientRect();
      const mouseX = clientX - left;
      const mouseY = clientY - top;

      const maxDist = Math.max(width, height) * pressure;

      charsRef.current.forEach(char => {
        const charBox = char.getBoundingClientRect();
        const charCenterX = charBox.left + charBox.width / 2 - left;
        const charCenterY = charBox.top + charBox.height / 2 - top;
        
        const dx = charCenterX - mouseX;
        const dy = charCenterY - mouseY;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        const proximity = Math.max(0, 1 - distance / maxDist);
        const scale = 1 + (maxFontSizeMultiplier - 1) * proximity * proximity;

        gsap.to(char, {
          scale: scale,
          duration: 0.4,
          ease: "power3.out",
        });
      });
    };

    const onMouseLeave = () => {
      gsap.to(charsRef.current, {
        scale: 1,
        duration: 0.5,
        ease: "power3.out",
      });
    };

    h1.addEventListener("mousemove", onMouseMove);
    h1.addEventListener("mouseleave", onMouseLeave);

    return () => {
      h1.removeEventListener("mousemove", onMouseMove);
      h1.removeEventListener("mouseleave", onMouseLeave);
    };
  }, [text, pressure, maxFontSizeMultiplier]);

  return (
    <h1 ref={h1Ref} className={cn("cursor-pointer", className)}>
      {/* Content is generated by useEffect */}
    </h1>
  );
};

export default TextPressure;